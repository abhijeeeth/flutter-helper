jks file generatot
==================
keytool -genkey -v -keystore C:/Users/chaya/Desktop/myjesusapp.jks -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 -alias key


Account delete Popup
=====================
  Future<void> _showDeleteAccountDialog(BuildContext context) async {
    return showDialog<void>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: const RoundedRectangleBorder(
            borderRadius: BorderRadiusDirectional.all(Radius.circular(20)),
          ),
          title: Stack(
            children: [
              const Center(
                child: Icon(
                  Icons.delete,
                  color: Colors.red,
                  size: 50,
                ),
              ),
              Positioned(
                right: 0,
                top: -15,
                child: IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                ),
              ),
            ],
          ),
          content: const SingleChildScrollView(
            child: ListBody(
              children: <Widget>[
                Text(
                  'Are you sure you want to delete your account?',
                  style: TextStyle(
                      color: Color.fromARGB(255, 0, 0, 0), fontSize: 16),
                  textAlign: TextAlign.center,
                ),
                SizedBox(height: 10),
                Text(
                  'This action cannot be undone.',
                  style: TextStyle(
                      color: Color.fromARGB(255, 131, 131, 131), fontSize: 14),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
          actions: <Widget>[
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: () {
                    Navigator.of(context).pop(); // User cancels delete
                  },
                  style: ElevatedButton.styleFrom(
                    elevation: 0,
                    backgroundColor: Colors.grey,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(50),
                    ),
                  ),
                  child: const Padding(
                    padding: EdgeInsets.symmetric(horizontal: 5, vertical: 5),
                    child: Text(
                      'Cancel',
                      style: TextStyle(
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
                ElevatedButton(
                  onPressed: () {
                    Helper.pushReplacement(
                        context, const LanguageView(), 'FacilitationCard');
                  },
                  style: ElevatedButton.styleFrom(
                    elevation: 0,
                    backgroundColor: Colors.red,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(50),
                    ),
                  ),
                  child: const Padding(
                    padding: EdgeInsets.symmetric(horizontal: 5, vertical: 5),
                    child: Text(
                      'Delete',
                      style: TextStyle(
                        color: Colors.white,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ],
        );
      },
    );
  }



Widget
===============

  Widget _loginButton() {
    return BlocConsumer<EmergencyblocBloc, EmergencyblocState>(
        builder: (context, state) {
          if (state is UpdateVictimLoading) {
            return const SizedBox(
              height: 18.0,
              width: 18.0,
              child: CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(
                    Color.fromARGB(255, 255, 255, 255)),
                strokeWidth: 2,
              ),
            );
          } else {
            return Padding(
              padding: const EdgeInsets.symmetric(horizontal: 20.0),
              child: Text(
                "SUBMIT".tr(),
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.w700),
              ),
            );
          }
        },
        listener: (context, state) {});
  }
}



